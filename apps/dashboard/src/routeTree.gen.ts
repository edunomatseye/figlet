/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VueFlatRouteImport } from './routes/vue-flat'
import { Route as TableRouteImport } from './routes/table'
import { Route as ProjectRouteImport } from './routes/project'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as AboutRouteImport } from './routes/about'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as FrameworkRouteRouteImport } from './routes/_framework/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SettingsXRouteImport } from './routes/settings/x'
import { Route as SettingsFbRouteImport } from './routes/settings/fb'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as FrameworkVueRouteImport } from './routes/_framework/vue'
import { Route as FrameworkReactRouteImport } from './routes/_framework/react'
import { Route as PostsPostIdEditRouteImport } from './routes/posts.$postId.edit'
import { Route as PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRouteImport } from './routes/posts.{-$categoryId}.{-$slugId}.$subcat'

const VueFlatRoute = VueFlatRouteImport.update({
  id: '/vue-flat',
  path: '/vue-flat',
  getParentRoute: () => rootRouteImport,
} as any)
const TableRoute = TableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectRoute = ProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const FrameworkRouteRoute = FrameworkRouteRouteImport.update({
  id: '/_framework',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsXRoute = SettingsXRouteImport.update({
  id: '/x',
  path: '/x',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsFbRoute = SettingsFbRouteImport.update({
  id: '/fb',
  path: '/fb',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)
const FrameworkVueRoute = FrameworkVueRouteImport.update({
  id: '/vue',
  path: '/vue',
  getParentRoute: () => FrameworkRouteRoute,
} as any)
const FrameworkReactRoute = FrameworkReactRouteImport.update({
  id: '/react',
  path: '/react',
  getParentRoute: () => FrameworkRouteRoute,
} as any)
const PostsPostIdEditRoute = PostsPostIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PostsPostIdRoute,
} as any)
const PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute =
  PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRouteImport.update({
    id: '/{-$categoryId}/{-$slugId}/$subcat',
    path: '/{-$categoryId}/{-$slugId}/$subcat',
    getParentRoute: () => PostsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/posts': typeof PostsRouteWithChildren
  '/project': typeof ProjectRoute
  '/table': typeof TableRoute
  '/vue-flat': typeof VueFlatRoute
  '/react': typeof FrameworkReactRoute
  '/vue': typeof FrameworkVueRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/fb': typeof SettingsFbRoute
  '/settings/x': typeof SettingsXRoute
  '/settings/': typeof SettingsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/{-$categoryId}/{-$slugId}/$subcat': typeof PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/posts': typeof PostsRouteWithChildren
  '/project': typeof ProjectRoute
  '/table': typeof TableRoute
  '/vue-flat': typeof VueFlatRoute
  '/react': typeof FrameworkReactRoute
  '/vue': typeof FrameworkVueRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/fb': typeof SettingsFbRoute
  '/settings/x': typeof SettingsXRoute
  '/settings': typeof SettingsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/{-$categoryId}/{-$slugId}/$subcat': typeof PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_framework': typeof FrameworkRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/posts': typeof PostsRouteWithChildren
  '/project': typeof ProjectRoute
  '/table': typeof TableRoute
  '/vue-flat': typeof VueFlatRoute
  '/_framework/react': typeof FrameworkReactRoute
  '/_framework/vue': typeof FrameworkVueRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/fb': typeof SettingsFbRoute
  '/settings/x': typeof SettingsXRoute
  '/settings/': typeof SettingsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/{-$categoryId}/{-$slugId}/$subcat': typeof PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/about'
    | '/posts'
    | '/project'
    | '/table'
    | '/vue-flat'
    | '/react'
    | '/vue'
    | '/posts/$postId'
    | '/settings/fb'
    | '/settings/x'
    | '/settings/'
    | '/posts/$postId/edit'
    | '/posts/{-$categoryId}/{-$slugId}/$subcat'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/posts'
    | '/project'
    | '/table'
    | '/vue-flat'
    | '/react'
    | '/vue'
    | '/posts/$postId'
    | '/settings/fb'
    | '/settings/x'
    | '/settings'
    | '/posts/$postId/edit'
    | '/posts/{-$categoryId}/{-$slugId}/$subcat'
  id:
    | '__root__'
    | '/'
    | '/_framework'
    | '/settings'
    | '/about'
    | '/posts'
    | '/project'
    | '/table'
    | '/vue-flat'
    | '/_framework/react'
    | '/_framework/vue'
    | '/posts/$postId'
    | '/settings/fb'
    | '/settings/x'
    | '/settings/'
    | '/posts/$postId/edit'
    | '/posts/{-$categoryId}/{-$slugId}/$subcat'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FrameworkRouteRoute: typeof FrameworkRouteRouteWithChildren
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  PostsRoute: typeof PostsRouteWithChildren
  ProjectRoute: typeof ProjectRoute
  TableRoute: typeof TableRoute
  VueFlatRoute: typeof VueFlatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vue-flat': {
      id: '/vue-flat'
      path: '/vue-flat'
      fullPath: '/vue-flat'
      preLoaderRoute: typeof VueFlatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/table': {
      id: '/table'
      path: '/table'
      fullPath: '/table'
      preLoaderRoute: typeof TableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_framework': {
      id: '/_framework'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof FrameworkRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/x': {
      id: '/settings/x'
      path: '/x'
      fullPath: '/settings/x'
      preLoaderRoute: typeof SettingsXRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/fb': {
      id: '/settings/fb'
      path: '/fb'
      fullPath: '/settings/fb'
      preLoaderRoute: typeof SettingsFbRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRoute
    }
    '/_framework/vue': {
      id: '/_framework/vue'
      path: '/vue'
      fullPath: '/vue'
      preLoaderRoute: typeof FrameworkVueRouteImport
      parentRoute: typeof FrameworkRouteRoute
    }
    '/_framework/react': {
      id: '/_framework/react'
      path: '/react'
      fullPath: '/react'
      preLoaderRoute: typeof FrameworkReactRouteImport
      parentRoute: typeof FrameworkRouteRoute
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditRouteImport
      parentRoute: typeof PostsPostIdRoute
    }
    '/posts/{-$categoryId}/{-$slugId}/$subcat': {
      id: '/posts/{-$categoryId}/{-$slugId}/$subcat'
      path: '/{-$categoryId}/{-$slugId}/$subcat'
      fullPath: '/posts/{-$categoryId}/{-$slugId}/$subcat'
      preLoaderRoute: typeof PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRouteImport
      parentRoute: typeof PostsRoute
    }
  }
}

interface FrameworkRouteRouteChildren {
  FrameworkReactRoute: typeof FrameworkReactRoute
  FrameworkVueRoute: typeof FrameworkVueRoute
}

const FrameworkRouteRouteChildren: FrameworkRouteRouteChildren = {
  FrameworkReactRoute: FrameworkReactRoute,
  FrameworkVueRoute: FrameworkVueRoute,
}

const FrameworkRouteRouteWithChildren = FrameworkRouteRoute._addFileChildren(
  FrameworkRouteRouteChildren,
)

interface SettingsRouteRouteChildren {
  SettingsFbRoute: typeof SettingsFbRoute
  SettingsXRoute: typeof SettingsXRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsFbRoute: SettingsFbRoute,
  SettingsXRoute: SettingsXRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

interface PostsPostIdRouteChildren {
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
}

const PostsPostIdRouteChildren: PostsPostIdRouteChildren = {
  PostsPostIdEditRoute: PostsPostIdEditRoute,
}

const PostsPostIdRouteWithChildren = PostsPostIdRoute._addFileChildren(
  PostsPostIdRouteChildren,
)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRouteWithChildren
  PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute: typeof PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRouteWithChildren,
  PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute:
    PostsChar123CategoryIdChar125Char123SlugIdChar125SubcatRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FrameworkRouteRoute: FrameworkRouteRouteWithChildren,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  PostsRoute: PostsRouteWithChildren,
  ProjectRoute: ProjectRoute,
  TableRoute: TableRoute,
  VueFlatRoute: VueFlatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
